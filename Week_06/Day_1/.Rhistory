# Hmm - can't get the code to work - but I can work it out manually
s_6_5_4_3_2_1_any_order <- s_six_dice %>%
filter(isin(., c(1, 2, 3, 4, 5, 6), ordered =  FALSE))
prob <- nrow(s_6_5_4_3_2_1_any_order) / nrow(s_six_dice)
# Outcomes of rolling six dice
s_six_dice <- rolldie(6)
library(prob)
library(gtools)
library(tidyverse)
library(janitor)
# Outcomes of rolling six dice
s_six_dice <- rolldie(6)
prob_6_5_4_3_2_1 <- nrow(1) / nrow(s_six_dice)
prob_6_5_4_3_2_1
# Hmm - can't get the code to work - but I can work it out manually
s_6_5_4_3_2_1_any_order <- s_six_dice %>%
filter(isin(., c(1, 2, 3, 4, 5, 6), ordered =  FALSE))
prob <- nrow(s_6_5_4_3_2_1_any_order) / nrow(s_six_dice)
prob
# this is a conditional probability problem.
# possible source of confusion here: the conditioning event comes first
# set up the card draw
card_draw <- cards(jokers = FALSE)
# add in the conditions to show which are black cards, and which arent
card_draw <- card_draw %>%
mutate(black_card = (suit == "Club" | suit == "Spade"))
# now we can filter the rows we want, and figure out the probability of getting a black spade
spades_and_black_card <- card_draw %>%
filter(black_card == TRUE & suit == "Spade")
prob_spades_and_black <- nrow(spades_and_black_card) / nrow(card_draw)
# we can figure out the probability of getting a black card now
black_card <- card_draw %>%
filter(black_card == TRUE)
prob_black <- nrow(black_card) / nrow(card_draw)
# now we can figure out the conditional probability
prob_spades_given_black <- prob_spades_and_black / prob_black
prob_spades_given_black
library(prob)
library(gtools)
library(tidyverse)
library(janitor)
titanic <- read_csv("data/titanic.csv")
class_count <- titanic %>%
group_by(class) %>%
summarise(n())
class_count
titanic <- titanic %>%
mutate(
crew = case_when(
str_detect(class, "crew") ~ TRUE,
str_detect(class, "staff") ~ TRUE,
TRUE ~ FALSE
),
.after = age
)
# Produces a 2 x 2 table
table <- titanic %>%
tabyl(class, survived)
table
table <- table %>%
adorn_totals(where = c("row", "col"))
table
View(titanic)
View(table)
View(titanic)
# Produces a 2 x 2 table
table <- survived_people %>%
tabyl(crew, survived)
class_count <- titanic %>%
group_by(class) %>%
summarise(n())
class_count
titanic <- titanic %>%
mutate(
crew = case_when(
str_detect(class, "crew") ~ TRUE,
str_detect(class, "staff") ~ TRUE,
TRUE ~ FALSE
),
.after = age
)
survived_people <- titanic %>%
select("crew", "survived")
View(survived_people)
# Produces a 2 x 2 table
table <- survived_people %>%
tabyl(crew, survived)
table
table <- table %>%
adorn_totals(where = c("row", "col"))
table
table <- table %>%
adorn_percentages() %>%
adorn_title()
table
# Produces a 2 x 2 table
class_table <- titanic %>%
tabyl(class, survived)
table
# Produces a 2 x 2 table
class_table <- titanic %>%
tabyl(class, survived)
class_table
class_table <- class_table %>%
adorn_totals(where = c("row", "col"))
class_table
class_table_percent <- class_table %>%
adorn_percentages() %>%
adorn_title()
class_table_percent
# probability that person is a 1st class passenger
first_class <- titanic %>%
summarise(prob = sum(class == "1st") / n())
first_class
View(first_class)
# probability that person is a 2nd class passenger
second_class <- titanic %>%
summarise(prob = sum(class == "2nd") / n())
second_class
# probability that person is a 3rd class passenger
third_class <- titanic %>%
summarise(prob = sum(class == "3rd") / n())
third_class
# probability that person is a 1st class passenger
first_class <- titanic %>%
summarise(prob = sum(class == "1st") / n())
first_class
